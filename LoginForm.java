/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package stokvepersonel;

/**
 *
 * @author bedir
 */



import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class LoginForm extends JFrame {
    private JTextField txtUsername;
    private JPasswordField txtPassword;
    private JButton btnLogin;

    // Veri tabanı bağlantı bilgileri
    private static final String URL = "jdbc:mysql://localhost:3306/x";
    private static final String USER = "root";
    private static final String PASSWORD = "";

    public LoginForm() {
        setTitle("Giris Ekranı");
        setSize(300, 150);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(null);

        JLabel lblUsername = new JLabel("Kullanıcı Adı:");
        lblUsername.setBounds(20, 20, 80, 25);
        add(lblUsername);

        txtUsername = new JTextField();
        txtUsername.setBounds(100, 20, 160, 25);
        add(txtUsername);

        JLabel lblPassword = new JLabel("Sifre:");
        lblPassword.setBounds(20, 50, 80, 25);
        add(lblPassword);

        txtPassword = new JPasswordField();
        txtPassword.setBounds(100, 50, 160, 25);
        add(txtPassword);

        btnLogin = new JButton("Giris Yap");
        btnLogin.setBounds(100, 80, 160, 25);
        add(btnLogin);

        btnLogin.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = txtUsername.getText();
                String password = new String(txtPassword.getPassword());

                int result = validateLogin(username, password);
                switch (result) {
                    case 0:
                        JOptionPane.showMessageDialog(null, "Başarıyla Giriş Yaptın!");
                        openMenu();
                        break;
                    case 1:
                        JOptionPane.showMessageDialog(null, "Hatalı Kullanıcı Adı!");
                        break;
                    case 2:
                        JOptionPane.showMessageDialog(null, "Hatalı Şifre!");
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Belirlenemeyen Hata!");
                        break;
                }
            }
        });
    }

    // Veri tabanı bağlantısını sağlayan yöntem
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }

    // Kullanıcı girişini doğrulayan yöntem
    private int validateLogin(String username, String password) {
        String userQuery = "SELECT * FROM myadmin WHERE username = ?";
        try (Connection conn = getConnection();
             PreparedStatement userStmt = conn.prepareStatement(userQuery)) {
            userStmt.setString(1, username);
            try (ResultSet userRs = userStmt.executeQuery()) {
                if (!userRs.next()) {
                    return 1; // Invalid username
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return -1; // Error
        }

        String passQuery = "SELECT * FROM myadmin WHERE username = ? AND password = ?";
        try (Connection conn = getConnection();
             PreparedStatement passStmt = conn.prepareStatement(passQuery)) {
            passStmt.setString(1, username);
            passStmt.setString(2, password);
            try (ResultSet passRs = passStmt.executeQuery()) {
                if (!passRs.next()) {
                    return 2; // Invalid password
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return -1; // Error
        }

        return 0; // Successful login
    }

    private void openMenu() {
        Menu menu = new Menu();
        menu.setVisible(true);
        dispose(); // Close the login form
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
